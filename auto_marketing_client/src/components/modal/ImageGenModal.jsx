import React, { useState } from "react";
import * as yup from "yup";
import {
  generateImagesForPost,
  saveImagesForPost,
} from "../../service/postService";
import { toast } from "react-hot-toast";

const imageGenSchema = yup.object().shape({
  prompt: yup
    .string()
    .required("Vui l√≤ng nh·∫≠p m√¥ t·∫£ h√¨nh ·∫£nh.")
    .min(10, "M√¥ t·∫£ ph·∫£i t·ª´ 10 k√Ω t·ª± tr·ªü l√™n.")
    .max(300, "M√¥ t·∫£ t·ªëi ƒëa 300 k√Ω t·ª±."),
  style: yup.string().required("Vui l√≤ng ch·ªçn phong c√°ch h√¨nh ·∫£nh."),
  numImages: yup
    .number()
    .typeError("S·ªë l∆∞·ª£ng h√¨nh ·∫£nh ph·∫£i l√† s·ªë.")
    .required("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h√¨nh ·∫£nh.")
    .min(1, "S·ªë l∆∞·ª£ng h√¨nh ·∫£nh ph·∫£i l·ªõn h∆°n 0.")
    .max(20, "T·ªëi ƒëa 20 h√¨nh ·∫£nh."),
});

function ImageGenModal({ isOpen, onClose, onSubmit, postTitle, postId }) {
  const [prompt, setPrompt] = useState("");
  const [style, setStyle] = useState("");
  const [numImages, setNumImages] = useState(1);
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [images, setImages] = useState([]);
  const [checked, setChecked] = useState([]);
  const [saveLoading, setSaveLoading] = useState(false);

  if (!isOpen) return null;

  const validateAndGenImages = async () => {
    try {
      await imageGenSchema.validate(
        { prompt, style, numImages },
        { abortEarly: false }
      );
      setErrors({});
      setLoading(true);
      const imgs = await generateImagesForPost(postId, {
        prompt,
        style,
        numImages,
      });
      setImages(imgs);
      setChecked(Array(imgs.length).fill(false));
      setLoading(false);
    } catch (err) {
      setLoading(false);
      console.error("Error generating images:", err);
      console.log("Error response:", err.response);
      console.log("Error message:", err.message);

      if (err.inner) {
        // Validation errors
        const errObj = {};
        err.inner.forEach((e) => {
          errObj[e.path] = e.message;
        });
        setErrors(errObj);
      } else {
        // API errors
        let errorMessage = "C√≥ l·ªói x·∫£y ra khi t·∫°o h√¨nh ·∫£nh";

        if (err.code === "ECONNABORTED" || err.message?.includes("timeout")) {
          errorMessage =
            "Qu√° tr√¨nh t·∫°o h√¨nh ·∫£nh m·∫•t qu√° nhi·ªÅu th·ªùi gian (> 90s). Vui l√≤ng th·ª≠ l·∫°i v·ªõi m√¥ t·∫£ ng·∫Øn g·ªçn h∆°n ho·∫∑c gi·∫£m s·ªë l∆∞·ª£ng ·∫£nh.";
        } else if (err.response?.status === 400) {
          // Check for content policy violation in multiple places
          const responseData = err.response?.data;
          const errorString = JSON.stringify(responseData || {});
          const messageString = err.message || "";

          if (
            messageString.includes("safety system") ||
            messageString.includes("content_policy_violation") ||
            errorString.includes("safety system") ||
            errorString.includes("content_policy_violation") ||
            responseData?.message?.includes("safety system") ||
            responseData?.message?.includes("content_policy_violation") ||
            responseData?.error?.code === "content_policy_violation"
          ) {
            errorMessage =
              "N·ªôi dung m√¥ t·∫£ kh√¥ng ph√π h·ª£p v·ªõi ch√≠nh s√°ch an to√†n c·ªßa AI. Vui l√≤ng th·ª≠ l·∫°i v·ªõi m√¥ t·∫£ kh√°c (tr√°nh n·ªôi dung b·∫°o l·ª±c, t√¨nh d·ª•c, ho·∫∑c kh√¥ng ph√π h·ª£p).";
          } else {
            errorMessage =
              "M√¥ t·∫£ h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung.";
          }
        } else if (err.response?.status === 401) {
          errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
        } else if (err.response?.status === 403) {
          errorMessage = "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.";
        } else if (err.response?.status === 429) {
          errorMessage = "ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.";
        } else if (err.response?.status === 500) {
          errorMessage = "Server ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.";
        } else if (err.response?.data?.message) {
          errorMessage = err.response.data.message;
        } else if (err.message) {
          errorMessage = err.message;
        }

        setErrors({
          general: errorMessage,
        });
        toast.error(errorMessage);
      }
    }
  };

  const handleCheck = (idx) => {
    setChecked((prev) => {
      const arr = [...prev];
      arr[idx] = !arr[idx];
      return arr;
    });
  };

  const handleSave = async () => {
    setSaveLoading(true);
    const selectedImages = images.filter((_, i) => checked[i]);
    try {
      await saveImagesForPost(postId, selectedImages);
      toast.success("L∆∞u ·∫£nh th√†nh c√¥ng!");
      if (onSubmit) onSubmit(selectedImages);
    } catch (err) {
      toast.error("L∆∞u ·∫£nh th·∫•t b·∫°i!");
    }
    setSaveLoading(false);
    setImages([]);
    setChecked([]);
    setPrompt("");
    setStyle("");
    setNumImages(1);
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30 p-4">
      <div className="bg-white rounded-xl shadow-lg w-full max-w-4xl max-h-[90vh] relative overflow-hidden flex flex-col">
        {/* Header - Fixed */}
        <div className="p-6 pb-4 border-b border-gray-200 flex-shrink-0">
          {/* N√∫t X ƒë√≥ng modal */}
          <button
            className="absolute top-4 right-4 w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-200 transition z-10"
            onClick={onClose}
            aria-label="ƒê√≥ng"
          >
            <svg width="22" height="22" viewBox="0 0 22 22" fill="none">
              <circle cx="11" cy="11" r="11" fill="#f3f3f3" />
              <path
                d="M7 7L15 15M15 7L7 15"
                stroke="#888"
                strokeWidth="2.2"
                strokeLinecap="round"
              />
            </svg>
          </button>
          <h2 className="text-xl font-bold mb-2">T·∫°o h√¨nh ·∫£nh cho b√†i vi·∫øt</h2>
          {postTitle && (
            <div className="text-base text-gray-700 font-medium">
              <span className="text-gray-500">Ti√™u ƒë·ªÅ b√†i vi·∫øt: </span>
              <span className="text-purple-700">{postTitle}</span>
            </div>
          )}
        </div>

        {/* Content - Scrollable */}
        <div className="flex-1 overflow-y-auto p-6">
          {/* Form nh·∫≠p prompt, style, s·ªë l∆∞·ª£ng */}
          {images.length === 0 && (
            <>
              {/* Hi·ªÉn th·ªã l·ªói chung n·∫øu c√≥ */}
              {errors.general && (
                <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <div className="flex items-start">
                    <svg
                      className="w-5 h-5 text-red-500 mt-0.5 mr-3 flex-shrink-0"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                        clipRule="evenodd"
                      />
                    </svg>
                    <div>
                      <h3 className="text-sm font-medium text-red-800 mb-1">
                        Kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh
                      </h3>
                      <p className="text-sm text-red-700">{errors.general}</p>
                    </div>
                  </div>
                </div>
              )}
              <div className="mb-6">
                <label className="block text-base font-semibold mb-2">
                  M√¥ t·∫£ h√¨nh ·∫£nh (prompt)
                </label>
                <textarea
                  className="w-full border rounded px-4 py-3 text-base resize-none min-h-[80px]"
                  placeholder="V√≠ d·ª•: C·∫£nh ƒë·∫πp thi√™n nhi√™n, s·∫£n ph·∫©m th·ª±c ph·∫©m, vƒÉn ph√≤ng l√†m vi·ªác hi·ªán ƒë·∫°i..."
                  value={prompt}
                  onChange={(e) => {
                    setPrompt(e.target.value);
                    // Reset errors when user changes input
                    if (errors.general || errors.prompt) {
                      setErrors((prev) => ({
                        ...prev,
                        general: undefined,
                        prompt: undefined,
                      }));
                    }
                  }}
                  rows={4}
                  maxLength={300}
                />
                <div className="flex justify-between items-center mt-1">
                  <span className="text-xs text-gray-500">
                    {prompt.length}/300 k√Ω t·ª±
                  </span>
                  {errors.prompt && (
                    <span className="text-red-500 text-xs">
                      {errors.prompt}
                    </span>
                  )}
                </div>
                {/* G·ª£i √Ω prompt an to√†n */}
                <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <p className="text-xs text-green-700 mb-1">
                    <strong>üí° G·ª£i √Ω m√¥ t·∫£ an to√†n:</strong>
                  </p>
                  <p className="text-xs text-green-600">
                    ‚Ä¢ C·∫£nh quan thi√™n nhi√™n, c√¥ng vi√™n, b√£i bi·ªÉn
                    <br />
                    ‚Ä¢ S·∫£n ph·∫©m, m√≥n ƒÉn, ƒë·ªì u·ªëng
                    <br />
                    ‚Ä¢ VƒÉn ph√≤ng, c√¥ng s·ªü, kh√¥ng gian l√†m vi·ªác
                    <br />
                    ‚Ä¢ Ho·∫°t ƒë·ªông th·ªÉ thao, gi·∫£i tr√≠ l√†nh m·∫°nh
                    <br />‚Ä¢ Ki·∫øn tr√∫c, n·ªôi th·∫•t, trang tr√≠
                  </p>
                </div>
              </div>
              <div className="mb-6">
                <label className="block text-base font-semibold mb-2">
                  Phong c√°ch h√¨nh ·∫£nh
                </label>
                <select
                  className={`w-full border rounded px-4 py-3 text-base ${
                    errors.style ? "border-red-500" : ""
                  }`}
                  value={style}
                  onChange={(e) => setStyle(e.target.value)}
                >
                  <option value="">Ch·ªçn phong c√°ch</option>
                  <option value="photorealistic">Ch·ª•p th·ª±c t·∫ø</option>
                  <option value="cartoon">Ho·∫°t h√¨nh</option>
                  <option value="minimal">T·ªëi gi·∫£n</option>
                  <option value="vintage">C·ªï ƒëi·ªÉn</option>
                  <option value="modern">Hi·ªán ƒë·∫°i</option>
                </select>
                {errors.style && (
                  <p className="text-red-500 text-sm mt-1">{errors.style}</p>
                )}
              </div>
              <div className="mb-6">
                <label className="block text-base font-semibold mb-2">
                  S·ªë l∆∞·ª£ng h√¨nh ·∫£nh
                </label>
                <input
                  type="number"
                  min={1}
                  max={20}
                  step={1}
                  className="w-full border rounded px-4 py-3 text-base"
                  value={numImages === 0 ? "" : numImages}
                  onChange={(e) => {
                    let val = e.target.value.replace(/[^0-9]/g, "");
                    val = val ? Math.max(1, Math.min(20, Number(val))) : 0;
                    setNumImages(val);
                  }}
                  onBlur={(e) => {
                    if (!e.target.value || Number(e.target.value) < 1)
                      setNumImages(1);
                  }}
                  inputMode="numeric"
                  placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng (1-20)"
                />
                {errors.numImages && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.numImages}
                  </p>
                )}
              </div>

              {loading && (
                <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-center">
                    <svg
                      className="animate-spin w-5 h-5 text-blue-500 mr-3"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      />
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                      />
                    </svg>
                    <div>
                      <p className="text-sm font-medium text-blue-800">
                        ƒêang t·∫°o {numImages} h√¨nh ·∫£nh...
                      </p>
                      <p className="text-xs text-blue-600 mt-1">
                        Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 30-90 gi√¢y. Vui l√≤ng ƒë·ª£i...
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}

          {/* Hi·ªÉn th·ªã ·∫£nh ƒë√£ gen v√† checkbox ch·ªçn */}
          {images.length > 0 && (
            <div className="mb-4">
              <h3 className="font-semibold mb-4 text-lg">Ch·ªçn ·∫£nh mu·ªën l∆∞u:</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
                {images.map((img, idx) => (
                  <div
                    key={img}
                    className={`relative border-2 rounded-xl p-3 flex flex-col items-center transition-all duration-200 cursor-pointer ${
                      checked[idx]
                        ? "border-purple-600 shadow-lg"
                        : "border-gray-200"
                    }`}
                    onClick={() => handleCheck(idx)}
                  >
                    <img
                      src={img}
                      alt={`gen-${idx}`}
                      className="w-full h-32 sm:h-40 object-cover rounded-lg mb-3"
                    />
                    <div className="flex items-center justify-center w-full">
                      <div
                        className={`w-6 h-6 flex items-center justify-center rounded-full border-2 ${
                          checked[idx]
                            ? "bg-purple-600 border-purple-600"
                            : "bg-white border-gray-400"
                        }`}
                        style={{ transition: "all 0.2s" }}
                      >
                        {checked[idx] && (
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 20 20"
                            fill="none"
                          >
                            <path
                              d="M5 10.5L9 14.5L15 7.5"
                              stroke="#fff"
                              strokeWidth="2.5"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                            />
                          </svg>
                        )}
                      </div>
                    </div>
                    <span className="mt-2 text-sm font-medium text-gray-700">
                      {checked[idx] ? "ƒê√£ ch·ªçn" : "Ch·ªçn"}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer - Fixed */}
        <div className="p-6 pt-4 border-t border-gray-200 flex-shrink-0">
          {images.length === 0 ? (
            <div className="flex justify-end gap-2">
              <button
                className="px-5 py-3 bg-gray-200 rounded text-base"
                onClick={onClose}
                disabled={loading}
              >
                H·ªßy
              </button>
              <button
                className={`px-5 py-3 rounded text-base flex items-center justify-center transition ${
                  loading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-purple-600 text-white hover:bg-purple-700"
                }`}
                onClick={loading ? undefined : validateAndGenImages}
                disabled={loading}
                style={{ minWidth: 120 }}
              >
                {loading ? (
                  <>
                    <svg
                      className="animate-spin mr-2"
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="#fff"
                        strokeWidth="4"
                      />
                      <path
                        className="opacity-75"
                        fill="#fff"
                        d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                      />
                    </svg>
                    ƒêang t·∫°o...
                  </>
                ) : (
                  "T·∫°o h√¨nh ·∫£nh"
                )}
              </button>
            </div>
          ) : (
            <div className="flex justify-end gap-2">
              <button
                className="px-6 py-3 bg-gray-200 rounded text-base"
                onClick={() => {
                  setImages([]);
                  setChecked([]);
                }}
                disabled={saveLoading}
              >
                Quay l·∫°i
              </button>
              <button
                className="px-6 py-3 bg-purple-600 text-white rounded text-base"
                onClick={handleSave}
                disabled={saveLoading || checked.every((c) => !c)}
              >
                {saveLoading ? "ƒêang l∆∞u..." : "L∆∞u ·∫£nh ƒë√£ ch·ªçn"}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default ImageGenModal;
