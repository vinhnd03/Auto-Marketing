import React, { useState, useEffect } from "react";
import { X, Wand2, Sparkles, Info } from "lucide-react";
// import { getAllCampaigns } from "../../service/campaign_service";
import { generateTopicsWithAI } from "../../service/topicService";
import { useParams } from "react-router-dom";
import campaignService from "../../service/campaignService";

const AITopicGenerator = ({ isOpen, onClose, onGenerate }) => {
  const [showEmptyWarning, setShowEmptyWarning] = useState(false);
  const [selectedCampaign, setSelectedCampaign] = useState("");
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [generating, setGenerating] = useState(false);
  const [topicsCount, setTopicsCount] = useState(10);
  const [additionalInstructions, setAdditionalInstructions] = useState("");
  // C·∫£nh b√°o nh·∫≠p k√Ω t·ª± ƒë·∫∑c bi·ªát v√† qu√° 500 k√Ω t·ª±
  const [showInvalidCharWarning, setShowInvalidCharWarning] = useState(false);
  const [showLengthWarning, setShowLengthWarning] = useState(false);
  const [aiSettings, setAiSettings] = useState({
    creativity: "balanced", // conservative, balanced, creative
    contentStyle: "professional", // friendly, professional, creative
    targetAudience: "general", // specific, general, broad
  });
  const { workspaceId } = useParams();

  const creativityOptions = [
    {
      value: "conservative",
      label: "B·∫£o th·ªß",
      description: "An to√†n, chuy√™n nghi·ªáp",
    },
    {
      value: "balanced",
      label: "C√¢n b·∫±ng",
      description: "V·ª´a an to√†n v·ª´a s√°ng t·∫°o",
    },
    {
      value: "creative",
      label: "S√°ng t·∫°o",
      description: "T√°o b·∫°o, ƒë·ªôc ƒë√°o",
    },
  ];

  const styleOptions = [
    {
      value: "friendly",
      label: "Th√¢n thi·ªán",
      description: "G·∫ßn g≈©i, d·ªÖ hi·ªÉu",
    },
    {
      value: "professional",
      label: "Chuy√™n nghi·ªáp",
      description: "Trang tr·ªçng, uy t√≠n",
    },
    {
      value: "creative",
      label: "S√°ng t·∫°o",
      description: "ƒê·ªôc ƒë√°o, thu h√∫t",
    },
  ];

  // Fetch campaigns when modal opens
  useEffect(() => {
    if (isOpen) {
      fetchCampaigns();
    }
  }, [isOpen]);

  const fetchCampaigns = async () => {
    setLoading(true);
    setError(null);
    try {
      const campaignsData = await campaignService.findAllCampaign(
        0,
        10,
        "",
        "",
        workspaceId
      );
      console.log("workspaceId", workspaceId);
      setCampaigns(campaignsData.content);
    } catch (err) {
      console.error("Error fetching campaigns:", err);

      // Hi·ªÉn th·ªã l·ªói cho user
      if (
        err.code === "NETWORK_ERROR" ||
        err.message.includes("Network Error")
      ) {
        setError(
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
        );
      } else if (err.response?.status === 404) {
        setError("API endpoint kh√¥ng t·ªìn t·∫°i.");
      } else if (err.response?.status >= 500) {
        setError("L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.");
      } else {
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch chi·∫øn d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.");
      }

      setCampaigns([]);
    } finally {
      setLoading(false);
    }
  };

  const handleGenerate = async () => {
    if (!selectedCampaign) return;

    setGenerating(true);

    try {
      // Prepare request data for API
      const requestData = {
        campaignId: parseInt(selectedCampaign),
        numberOfTopics: topicsCount,
        creativityLevel: aiSettings.creativity,
        contentStyle: aiSettings.contentStyle,
        additionalInstructions: additionalInstructions.trim() || undefined,
      };

      // Call real API to generate topics
      const response = await generateTopicsWithAI(requestData);
      const generatedTopics = Array.isArray(response)
        ? response
        : response.topics || [];

      // Transform API response to match UI format
      const transformedTopics = generatedTopics.map((topic, index) => ({
        id: topic.id,
        title: topic.name,
        description: topic.description,
        category: "AI Generated",
        campaignId: topic.campaignId,
        campaignName:
          campaigns.find((c) => c.id === topic.campaignId)?.name ||
          "Unknown Campaign",
        posts: 0,
        pendingPosts: 0,
        publishedPosts: 0,
        engagement: "0",
        status: "APPROVED", // Force status to APPROVED so topics show instantly
        aiGenerated: topic.generatedByAI,
        createdDate: topic.createdAt,
        platforms: campaigns.find((c) => c.id === topic.campaignId)
          ?.platforms || ["Facebook", "Instagram"],
        targetKeywords: [],
        aiSettings: aiSettings,
        aiPrompt: topic.aiPrompt,
      }));

      onGenerate(transformedTopics);
      onClose();
    } catch (error) {
      console.error("Error generating topics:", error);

      // Show user-friendly error message
      let errorMessage = "Kh√¥ng th·ªÉ t·∫°o topics. Vui l√≤ng th·ª≠ l·∫°i.";

      if (error.message.includes("timeout")) {
        errorMessage =
          "AI generation m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i v·ªõi √≠t topics h∆°n.";
      } else if (error.message.includes("Network Error")) {
        errorMessage =
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server AI. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.";
      } else if (error.message.includes("Campaign not found")) {
        errorMessage =
          "Chi·∫øn d·ªãch kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn chi·∫øn d·ªãch kh√°c.";
      }

      setError(errorMessage);
    } finally {
      setGenerating(false);
    }
  };

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isOpen) {
      // Save original values
      const originalBodyOverflow = document.body.style.overflow;
      const originalHtmlOverflow = document.documentElement.style.overflow;
      const originalBodyMargin = document.body.style.margin;
      const originalBodyPadding = document.body.style.padding;

      // Apply modal styles
      document.body.style.overflow = "hidden";
      document.documentElement.style.overflow = "hidden";
      document.body.style.margin = "0";
      document.body.style.padding = "0";
      document.body.style.height = "100vh";
      document.body.style.width = "100vw";

      return () => {
        // Restore original values
        document.body.style.overflow = originalBodyOverflow;
        document.documentElement.style.overflow = originalHtmlOverflow;
        document.body.style.margin = originalBodyMargin;
        document.body.style.padding = originalBodyPadding;
        document.body.style.height = "";
        document.body.style.width = "";
      };
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <>
      {/* Overlay ph·ªß to√†n b·ªô viewport */}
      <div
        className="fixed bg-black bg-opacity-60 backdrop-blur-sm"
        style={{
          zIndex: 99999,
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          width: "100vw",
          height: "100vh",
          margin: 0,
          padding: 0,
        }}
      />

      {/* Modal container */}
      <div
        className="fixed flex items-center justify-center"
        style={{
          zIndex: 100000,
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          width: "100vw",
          height: "100vh",
          margin: 0,
          padding: "16px",
        }}
      >
        <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto relative">
          <div className="flex items-center justify-between p-6 border-b">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-purple-100 rounded-lg">
                <Wand2 className="text-purple-600" size={24} />
              </div>
              <div>
                <h2 className="text-xl font-bold text-gray-900">
                  AI T·∫°o Topics
                </h2>
                <p className="text-sm text-gray-600">
                  T·ª± ƒë·ªông t·∫°o c√°c ch·ªß ƒë·ªÅ cho chi·∫øn d·ªãch marketing
                </p>
              </div>
            </div>
            <button
              onClick={generating ? undefined : onClose}
              disabled={generating}
              className={`text-gray-400 hover:text-gray-600 ${
                generating ? "cursor-not-allowed opacity-50" : ""
              }`}
            >
              <X size={24} />
            </button>
          </div>

          <div className="p-6 space-y-6">
            {/* Error message */}
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-center">
                  <div className="text-red-600 mr-2">‚ö†Ô∏è</div>
                  <div>
                    <h4 className="font-medium text-red-900">
                      L·ªói t·∫£i d·ªØ li·ªáu
                    </h4>
                    <p className="text-red-700 text-sm mt-1">{error}</p>
                  </div>
                </div>
                <button
                  onClick={fetchCampaigns}
                  className="mt-3 text-sm bg-red-100 text-red-800 px-3 py-1 rounded-lg hover:bg-red-200 transition-colors"
                >
                  üîÑ Th·ª≠ l·∫°i
                </button>
              </div>
            )}

            {/* Campaign Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-1">
                Ch·ªçn chi·∫øn d·ªãch
                <span className="text-red-500 font-bold">*</span>
              </label>
              {loading ? (
                <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600 mr-2"></div>
                  <span className="text-gray-600">
                    ƒêang t·∫£i danh s√°ch chi·∫øn d·ªãch...
                  </span>
                </div>
              ) : (
                <select
                  value={selectedCampaign}
                  onChange={
                    generating
                      ? undefined
                      : (e) => setSelectedCampaign(e.target.value)
                  }
                  className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${
                    generating ? "cursor-not-allowed opacity-50" : ""
                  }`}
                  disabled={campaigns.length === 0 || generating}
                >
                  <option value="">-- Ch·ªçn chi·∫øn d·ªãch --</option>
                  {campaigns
                    .filter((campaign) => campaign.status === "ACTIVE")
                    .map((campaign) => (
                      <option key={campaign.id} value={campaign.id}>
                        {campaign.name}
                      </option>
                    ))}
                </select>
              )}
              {!loading && campaigns.length === 0 && !error && (
                <p className="text-sm text-gray-500 mt-1">
                  Kh√¥ng c√≥ chi·∫øn d·ªãch n√†o. H√£y t·∫°o chi·∫øn d·ªãch m·ªõi tr∆∞·ªõc.
                </p>
              )}
            </div>

            {/* Topics Count */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                S·ªë l∆∞·ª£ng topics
              </label>
              <select
                value={topicsCount}
                onChange={
                  generating
                    ? undefined
                    : (e) => setTopicsCount(parseInt(e.target.value))
                }
                className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${
                  generating ? "cursor-not-allowed opacity-50" : ""
                }`}
                disabled={generating}
              >
                <option value={5}>5 topics</option>
                <option value={10}>10 topics</option>
                <option value={15}>15 topics</option>
                <option value={20}>20 topics</option>
              </select>
            </div>

            {/* Additional Instructions */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2 relative">
                H∆∞·ªõng d·∫´n th√™m cho AI (t√πy ch·ªçn)
                <span className="relative group cursor-pointer">
                  <Info
                    size={16}
                    className="text-gray-400 group-hover:text-purple-600"
                  />
                  <span className="absolute left-6 top-1 z-10 hidden group-hover:block bg-gray-900 text-white text-xs rounded px-2 py-1 shadow-lg whitespace-nowrap">
                    B·∫°n c√≥ th·ªÉ nh·∫≠p h∆∞·ªõng d·∫´n chi ti·∫øt cho AI. T·ªëi ƒëa 500 k√Ω t·ª±.
                  </span>
                </span>
              </label>
              <textarea
                value={additionalInstructions}
                onChange={
                  generating
                    ? undefined
                    : (e) => {
                        let value = e.target.value;
                        const forbiddenRegex = /[!@#$%^&*<>]/;
                        const invalidChar = value.match(forbiddenRegex);
                        setShowInvalidCharWarning(!!invalidChar);
                        setShowLengthWarning(value.length > 500);
                        // N·∫øu c√≥ nhi·ªÅu h∆°n 1 d·∫•u c√°ch li√™n ti·∫øp th√¨ c·∫£nh b√°o
                        const hasMultipleSpaces = / {2,}/.test(value);
                        // Chu·∫©n h√≥a: thay th·∫ø nhi·ªÅu d·∫•u c√°ch li√™n ti·∫øp b·∫±ng 1 d·∫•u c√°ch
                        value = value.replace(/ {2,}/g, " ");
                        setAdditionalInstructions(value);
                        // Chu·∫©n h√≥a input: lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a, trim ƒë·∫ßu/cu·ªëi
                        const normalized = value.replace(/\s+/g, " ").trim();
                        // N·∫øu normalized r·ªóng ho·∫∑c ch·ªâ c√≥ 1 t·ª´ th√¨ b√°o l·ªói
                        const wordCount =
                          normalized.length === 0
                            ? 0
                            : normalized.split(" ").length;
                        setShowEmptyWarning(wordCount < 2 || hasMultipleSpaces);
                      }
                }
                placeholder="V√≠ d·ª•: T·∫≠p trung v√†o ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng tr·∫ª tu·ªïi, s·ª≠ d·ª•ng hashtag trending, ƒë·ªÅ c·∫≠p ƒë·∫øn s·∫£n ph·∫©m m·ªõi..."
                className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none ${
                  showInvalidCharWarning || showLengthWarning
                    ? "border-red-500"
                    : ""
                } ${generating ? "cursor-not-allowed opacity-50" : ""}`}
                rows={3}
                disabled={generating}
              />
              {showEmptyWarning && (
                <div className="text-xs text-red-600 mt-1">
                  ‚ö†Ô∏è N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c ch·ªâ to√†n kho·∫£ng tr·∫Øng.
                </div>
              )}
              <div className="text-xs text-gray-500 mt-1">
                {additionalInstructions.length}/500 k√Ω t·ª±
              </div>
              {showInvalidCharWarning && (
                <div className="text-xs text-red-600 mt-1">
                  ‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c nh·∫≠p k√Ω t·ª± ƒë·∫∑c bi·ªát! Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi
                  dung.
                </div>
              )}
              {showLengthWarning && (
                <div className="text-xs text-red-600 mt-1">
                  ‚ö†Ô∏è B·∫°n ƒë√£ nh·∫≠p qu√° 500 k√Ω t·ª±! Vui l√≤ng r√∫t ng·∫Øn h∆∞·ªõng d·∫´n.
                </div>
              )}
            </div>

            {/* AI Settings */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900">C√†i ƒë·∫∑t AI</h3>

              {/* Creativity Level */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M·ª©c ƒë·ªô s√°ng t·∫°o
                </label>
                <div className="grid grid-cols-3 gap-3">
                  {creativityOptions.map((option) => (
                    <div
                      key={option.value}
                      onClick={
                        generating
                          ? undefined
                          : () =>
                              setAiSettings({
                                ...aiSettings,
                                creativity: option.value,
                              })
                      }
                      className={`p-3 border rounded-lg cursor-pointer transition-all ${
                        aiSettings.creativity === option.value
                          ? "border-purple-500 bg-purple-50"
                          : "border-gray-300 hover:border-gray-400"
                      } ${
                        generating
                          ? "cursor-not-allowed opacity-50 pointer-events-none"
                          : ""
                      }`}
                    >
                      <div className="font-medium text-sm">{option.label}</div>
                      <div className="text-xs text-gray-600">
                        {option.description}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Content Style */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Phong c√°ch n·ªôi dung
                </label>
                <div className="grid grid-cols-3 gap-3">
                  {styleOptions.map((option) => (
                    <div
                      key={option.value}
                      onClick={
                        generating
                          ? undefined
                          : () =>
                              setAiSettings({
                                ...aiSettings,
                                contentStyle: option.value,
                              })
                      }
                      className={`p-3 border rounded-lg cursor-pointer transition-all ${
                        aiSettings.contentStyle === option.value
                          ? "border-purple-500 bg-purple-50"
                          : "border-gray-300 hover:border-gray-400"
                      } ${
                        generating
                          ? "cursor-not-allowed opacity-50 pointer-events-none"
                          : ""
                      }`}
                    >
                      <div className="font-medium text-sm">{option.label}</div>
                      <div className="text-xs text-gray-600">
                        {option.description}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Info Box */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center">
                <Sparkles className="text-blue-600 mr-2" size={20} />
                <h4 className="font-medium text-blue-900">AI s·∫Ω t·∫°o g√¨?</h4>
              </div>
              <ul className="text-blue-700 mt-2 text-sm space-y-1">
                <li>
                  ‚Ä¢ {topicsCount} ch·ªß ƒë·ªÅ ƒë∆∞·ª£c AI t·∫°o ra ph√π h·ª£p v·ªõi chi·∫øn d·ªãch
                </li>
                <li>‚Ä¢ M√¥ t·∫£ chi ti·∫øt v√† h·∫•p d·∫´n cho t·ª´ng topic</li>
                <li>‚Ä¢ Ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô s√°ng t·∫°o v√† phong c√°ch ƒë√£ ch·ªçn</li>
                <li>‚Ä¢ L∆∞u tr·ªØ t·ª± ƒë·ªông v√†o database ƒë·ªÉ qu·∫£n l√Ω</li>
                <li>‚Ä¢ C√≥ th·ªÉ approve/reject v√† ch·ªânh s·ª≠a sau khi t·∫°o</li>
              </ul>
            </div>

            {generating && (
              <div className="bg-purple-50 p-4 rounded-lg">
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-purple-600 mr-3"></div>
                  <h4 className="font-medium text-purple-900">
                    AI ƒëang ph√¢n t√≠ch v√† t·∫°o topics...
                  </h4>
                </div>
                <p className="text-purple-700 mt-2 text-sm">
                  ƒêang s·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch chi·∫øn d·ªãch v√† t·∫°o {topicsCount}{" "}
                  topics ph√π h·ª£p. Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 30-90 gi√¢y t√πy v√†o ƒë·ªô
                  ph·ª©c t·∫°p.
                </p>
                <div className="mt-3 text-xs text-purple-600">
                  {(() => {
                    const creativityLabel =
                      creativityOptions.find(
                        (opt) => opt.value === aiSettings.creativity
                      )?.label || aiSettings.creativity;
                    const styleLabel =
                      styleOptions.find(
                        (opt) => opt.value === aiSettings.contentStyle
                      )?.label || aiSettings.contentStyle;
                    return `üí° AI ƒëang xem x√©t: Th√¥ng tin chi·∫øn d·ªãch, m·ª©c ƒë·ªô s√°ng t·∫°o (${creativityLabel}), phong c√°ch n·ªôi dung (${styleLabel})`;
                  })()}
                </div>
              </div>
            )}
          </div>

          <div className="flex justify-between items-center p-6 border-t bg-gray-50">
            <button
              onClick={generating ? undefined : onClose}
              disabled={generating}
              className={`px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 ${
                generating ? "cursor-not-allowed opacity-50" : ""
              }`}
            >
              H·ªßy
            </button>
            <button
              onClick={handleGenerate}
              disabled={
                !selectedCampaign ||
                generating ||
                showInvalidCharWarning ||
                showLengthWarning ||
                showEmptyWarning
              }
              className={`px-6 py-2 text-sm font-medium rounded-lg transition-colors ${
                !selectedCampaign ||
                generating ||
                showInvalidCharWarning ||
                showLengthWarning ||
                showEmptyWarning
                  ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                  : "bg-purple-600 text-white hover:bg-purple-700"
              }`}
            >
              {generating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                  ƒêang t·∫°o...
                </>
              ) : (
                <>
                  <Wand2 className="mr-2 inline" size={16} />
                  T·∫°o Topics
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default AITopicGenerator;
