package com.codegym.auto_marketing_server.service.impl;


import com.codegym.auto_marketing_server.dto.ContentGenerationRequestDTO;
import com.codegym.auto_marketing_server.dto.GPTMessage;
import com.codegym.auto_marketing_server.dto.GPTRequestDTO;
import com.codegym.auto_marketing_server.dto.GPTResponseDTO;
import com.codegym.auto_marketing_server.entity.Campaign;
import com.codegym.auto_marketing_server.entity.Topic;
import com.codegym.auto_marketing_server.exception.GPTServiceException;
import com.codegym.auto_marketing_server.service.IGPTService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.concurrent.CompletableFuture;


@Service
@Slf4j
@ConditionalOnProperty(name = "app.gpt.mock.enabled", havingValue = "false")
public class GPTService implements IGPTService {

    private static final String GPT_MODEL = "gpt-3.5-turbo";
    private static final String SYSTEM_ROLE = "system";
    private static final String USER_ROLE = "user";
    private static final String DEFAULT_SOCIAL_POST = "b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi";
    private static final String DESCRIPTION_PREFIX = "‚Ä¢ M√¥ t·∫£: ";

    @Value("${openai.api.key}")
    private String openaiApiKey;

    @Value("${openai.api.url}")
    private String openaiApiUrl;

    private final RestTemplate restTemplate;

    public GPTService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Override
    public CompletableFuture<String> generateTopicsFromCampaign(Campaign campaign, Integer numberOfTopics, String additionalInstructions) {
        try {
            log.info("üáªüá≥ Generating {} Vietnamese topics for campaign '{}'", numberOfTopics, campaign.getName());

            String prompt = buildVietnameseTopicGenerationPrompt(campaign, numberOfTopics, additionalInstructions);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(1500);
            requestDTO.setTemperature(0.7);
            requestDTO.setMessages(Arrays.asList(new GPTMessage(SYSTEM_ROLE, "B·∫°n l√† m·ªôt chuy√™n gia marketing ng∆∞·ªùi Vi·ªát Nam v·ªõi 10 nƒÉm kinh nghi·ªám. " + "B·∫°n hi·ªÉu r√µ th·ªã tr∆∞·ªùng Vi·ªát Nam, vƒÉn h√≥a, ng√¥n ng·ªØ v√† h√†nh vi ti√™u d√πng. " + "H√£y t·∫°o c√°c ch·ªß ƒë·ªÅ marketing b·∫±ng ti·∫øng Vi·ªát thu·∫ßn t√∫y, ph√π h·ª£p v·ªõi ng∆∞·ªùi Vi·ªát. " + "QUAN TR·ªåNG: Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng ti·∫øng Anh."), new GPTMessage(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated Vietnamese topics");
            log.debug("Generated content: {}", content);

            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("Error generating Vietnamese topics: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o ra c√°c ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateContentFromTopic(Topic topic, String tone, String contentType, String additionalInstructions) {
        try {
            log.info("üáªüá≥ Generating Vietnamese {} content for topic '{}'", contentType, topic.getName());

            String prompt = buildVietnameseContentGenerationPrompt(topic, tone, contentType, additionalInstructions);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(1200);
            requestDTO.setTemperature(0.8);
            requestDTO.setMessages(Arrays.asList(new GPTMessage(SYSTEM_ROLE, "B·∫°n l√† m·ªôt copywriter chuy√™n nghi·ªáp ng∆∞·ªùi Vi·ªát Nam, chuy√™n t·∫°o n·ªôi dung marketing ti·∫øng Vi·ªát. " + "B·∫°n vi·∫øt theo phong c√°ch ng∆∞·ªùi Vi·ªát, s·ª≠ d·ª•ng t·ª´ ng·ªØ th√¢n thi·ªán, d·ªÖ hi·ªÉu. " + "QUAN TR·ªåNG: Ch·ªâ vi·∫øt b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng ti·∫øng Anh tr·ª´ khi c·∫ßn thi·∫øt cho hashtag."), new GPTMessage(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated Vietnamese content");
            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("Error generating Vietnamese content: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateLongFormContent(Topic topic, ContentGenerationRequestDTO request) {
        try {
            log.info("üáªüá≥ Generating long-form {} content ({} words) for topic '{}'", request.getContentType(), request.getTargetWordCount(), topic.getName());

            String prompt = buildLongFormContentPrompt(topic, request);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(calculateTokensForWordCount(request.getTargetWordCount()));
            requestDTO.setTemperature(0.7);
            requestDTO.setMessages(Arrays.asList(new GPTMessage(SYSTEM_ROLE, buildLongFormSystemPrompt()), new GPTMessage(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated long-form Vietnamese content ({} words estimated)", request.getTargetWordCount());

            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("Error generating long-form Vietnamese content: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung d√†i ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateImagePromptFromContent(String content) {
        try {
            log.info("üáªüá≥ Generating image prompt for Vietnamese content");

            String prompt = String.format("T·∫°o m·ªôt prompt chi ti·∫øt b·∫±ng TI·∫æNG ANH ƒë·ªÉ generate h√¨nh ·∫£nh minh h·ªça cho n·ªôi dung marketing ti·∫øng Vi·ªát sau:\\n\\n" + "N·ªòI DUNG: %s\\n\\n" + "Y√äU C·∫¶U CHO PROMPT:\\n" + "- M√¥ t·∫£ h√¨nh ·∫£nh b·∫±ng ti·∫øng Anh chuy√™n nghi·ªáp\\n" + "- Phong c√°ch hi·ªán ƒë·∫°i, ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam\\n" + "- M√†u s·∫Øc: xanh d∆∞∆°ng (#1976d2), tr·∫Øng, x√°m nh·∫π\\n" + "- Composition cho social media (16:9 ho·∫∑c 1:1)\\n" + "- Professional, clean, modern style\\n" + "- Avoid text in image\\n\\n" + "CH·ªà TR·∫¢ V·ªÄ PROMPT TI·∫æNG ANH, KH√îNG GI·∫¢I TH√çCH TH√äM:", content);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(300);
            requestDTO.setTemperature(0.6);
            requestDTO.setMessages(Arrays.asList(new GPTMessage(SYSTEM_ROLE, "B·∫°n l√† chuy√™n gia t·∫°o prompt cho AI image generation. " + "H√£y t·∫°o prompt ti·∫øng Anh ng·∫Øn g·ªçn, ch√≠nh x√°c cho DALL-E ho·∫∑c Midjourney."), new GPTMessage(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String imagePrompt = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated image prompt");
            return CompletableFuture.completedFuture(imagePrompt);

        } catch (Exception e) {
            log.error("Error generating image prompt: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o image prompt", e);
        }
    }

    @Override
    public CompletableFuture<GPTResponseDTO> callGPTAPI(GPTRequestDTO request) {
        try {
            log.debug("Calling OpenAI API with model: {}", request.getModel());

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(openaiApiKey);

            HttpEntity<GPTRequestDTO> entity = new HttpEntity<>(request, headers);
            ResponseEntity<GPTResponseDTO> response = restTemplate.postForEntity(openaiApiUrl, entity, GPTResponseDTO.class);

            GPTResponseDTO responseBody = response.getBody();
            if (responseBody != null && responseBody.getUsage() != null) {
                log.info("Token usage: {} total tokens", responseBody.getUsage().getTotalTokens());
            }

            return CompletableFuture.completedFuture(responseBody);

        } catch (Exception e) {
            log.error("OpenAI API call failed: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ g·ªçi OpenAI API", e);
        }
    }

    private String buildLongFormSystemPrompt() {
        StringBuilder systemPrompt = new StringBuilder();
        systemPrompt.append("B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt n·ªôi dung marketing ng∆∞·ªùi Vi·ªát Nam v·ªõi 15 nƒÉm kinh nghi·ªám. ");
        systemPrompt.append("B·∫°n chuy√™n vi·∫øt c√°c b√†i vi·∫øt d√†i, chi ti·∫øt v√† c√≥ chi·ªÅu s√¢u cho th·ªã tr∆∞·ªùng Vi·ªát Nam. ");
        systemPrompt.append("QUAN TR·ªåNG: Ch·ªâ vi·∫øt b·∫±ng ti·∫øng Vi·ªát thu·∫ßn t√∫y, t·ª± nhi√™n nh∆∞ ng∆∞·ªùi Vi·ªát. Phong c√°ch vi·∫øt c·ªßa b·∫°n t·ª± nhi√™n, chuy√™n nghi·ªáp v√† ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát.");
        return systemPrompt.toString();
    }

    private String buildLongFormContentPrompt(Topic topic, ContentGenerationRequestDTO request) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("NHI·ªÜM V·ª§: Vi·∫øt b√†i ").append(mapContentTypeToVietnamese(request.getContentType()));
        prompt.append(" d√†i v√† chi ti·∫øt b·∫±ng TI·∫æNG VI·ªÜT\n\n");
        prompt.append("TH√îNG TIN CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ch·ªß ƒë·ªÅ: ").append(topic.getName()).append("\n");
        prompt.append(DESCRIPTION_PREFIX).append(topic.getDescription()).append("\n\n");

        if (request.getTargetWordCount() != null) {
            prompt.append("‚Ä¢ ƒê·ªô d√†i m·ª•c ti√™u: ").append(request.getTargetWordCount()).append(" t·ª´\n");
        }

        return prompt.toString();
    }

    private Integer calculateTokensForWordCount(Integer wordCount) {
        if (wordCount == null) return 1500;
        return Math.min(4000, (int) (wordCount * 1.5) + 500);
    }

    private String buildVietnameseTopicGenerationPrompt(Campaign campaign, Integer numberOfTopics, String additionalInstruction) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("NHI·ªÜM V·ª§: T·∫°o ").append(numberOfTopics).append(" ch·ªß ƒë·ªÅ marketing b·∫±ng TI·∫æNG VI·ªÜT\n\n");
        prompt.append("TH√îNG TIN CHI·∫æN D·ªäCH:\n");
        prompt.append("‚Ä¢ T√™n chi·∫øn d·ªãch: ").append(campaign.getName()).append("\n");
        prompt.append(DESCRIPTION_PREFIX).append(campaign.getDescription()).append("\n\n");

        if (additionalInstruction != null && !additionalInstruction.trim().isEmpty()) {
            prompt.append("Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT: ").append(additionalInstruction).append("\n\n");
        }

        prompt.append("ƒê·ªäNH D·∫†NG TR·∫¢ V·ªÄ JSON:\n");
        prompt.append("{\n");
        prompt.append("  \"topics\": [\n");
        prompt.append("    {\n");
        prompt.append("      \"name\": \"T√™n ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát\",\n");
        prompt.append("      \"description\": \"M√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát\"\n");
        prompt.append("    }\n");
        prompt.append("  ]\n");
        prompt.append("}\n");

        return prompt.toString();
    }

    private String buildVietnameseContentGenerationPrompt(Topic topic, String tone, String contentType, String additionalInstructions) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("NHI·ªÜM V·ª§: T·∫°o n·ªôi dung ").append(mapContentTypeToVietnamese(contentType)).append(" b·∫±ng TI·∫æNG VI·ªÜT\n\n");
        prompt.append("TH√îNG TIN CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ch·ªß ƒë·ªÅ: ").append(topic.getName()).append("\n");
        prompt.append(DESCRIPTION_PREFIX).append(topic.getDescription()).append("\n");
        prompt.append("‚Ä¢ Tone: ").append(mapToneToVietnamese(tone)).append("\n\n");

        if (additionalInstructions != null && !additionalInstructions.trim().isEmpty()) {
            prompt.append("Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT: ").append(additionalInstructions).append("\n\n");
        }
        prompt.append("‚Ä¢ B·∫ÆT BU·ªòC: K·∫øt th√∫c b√†i vi·∫øt b·∫±ng √≠t nh·∫•t 3 hashtag, m·ªói hashtag m·ªôt d√≤ng, b·∫Øt ƒë·∫ßu b·∫±ng k√Ω t·ª± #. Kh√¥ng b·ªè qua ph·∫ßn hashtag.\n");
        prompt.append("Y√äU C·∫¶U: Vi·∫øt ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát, t·ª± nhi√™n v√† h·∫•p d·∫´n\n");
        return prompt.toString();
    }

    private String mapToneToVietnamese(String tone) {
        if (tone == null) return "chuy√™n nghi·ªáp v√† th√¢n thi·ªán";
        return switch (tone.toLowerCase()) {
            case "professional" -> "chuy√™n nghi·ªáp v√† uy t√≠n";
            case "casual" -> "th√¢n thi·ªán v√† g·∫ßn g≈©i";
            case "enthusiastic" -> "h√†o h·ª©ng v√† nƒÉng ƒë·ªông";
            case "informative" -> "h·ªØu √≠ch v√† gi√°o d·ª•c";
            case "promotional" -> "khuy·∫øn m√£i v√† h·∫•p d·∫´n";
            case "inspirational" -> "truy·ªÅn c·∫£m h·ª©ng v√† t√≠ch c·ª±c";
            default -> "chuy√™n nghi·ªáp v√† th√¢n thi·ªán";
        };
    }

    private String mapContentTypeToVietnamese(String contentType) {
        if (contentType == null) return DEFAULT_SOCIAL_POST;
        return switch (contentType.toLowerCase()) {
            case "social_post" -> DEFAULT_SOCIAL_POST;
            case "article" -> "b√†i vi·∫øt chi ti·∫øt";
            case "long_article" -> "b√†i vi·∫øt d√†i chuy√™n s√¢u";
            case "blog_post" -> "blog post chi ti·∫øt";
            case "detailed_guide" -> "h∆∞·ªõng d·∫´n chi ti·∫øt";
            case "white_paper" -> "b√°o c√°o chuy√™n m√¥n";
            case "case_study" -> "nghi√™n c·ª©u t√¨nh hu·ªëng";
            case "promotion" -> "n·ªôi dung khuy·∫øn m√£i";
            case "story" -> "story/reel ng·∫Øn";
            case "email" -> "email marketing";
            default -> DEFAULT_SOCIAL_POST;
        };
    }

    /**
     * T√°ch c√°c hashtag t·ª´ n·ªôi dung AI tr·∫£ v·ªÅ. Ch·ªâ l·∫•y c√°c d√≤ng cu·ªëi b·∫Øt ƒë·∫ßu b·∫±ng '#'.
     */
    private String extractHashtags(String content) {
        if (content == null || content.isEmpty()) return "";
        String[] lines = content.split("\n");
        StringBuilder hashtags = new StringBuilder();
        for (int i = lines.length - 1; i >= 0; i--) {
            String line = lines[i].trim();
            if (line.startsWith("#")) {
                hashtags.insert(0, line + "\n");
            } else if (!line.isEmpty()) {
                // N·∫øu g·∫∑p d√≤ng kh√¥ng ph·∫£i hashtag, d·ª´ng l·∫°i (ch·ªâ l·∫•y c√°c hashtag cu·ªëi c√πng)
                break;
            }
        }
        return hashtags.toString().trim();
    }
}

