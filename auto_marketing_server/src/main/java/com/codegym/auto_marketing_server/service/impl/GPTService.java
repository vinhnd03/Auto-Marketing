package com.codegym.auto_marketing_server.service.impl;


import com.codegym.auto_marketing_server.dto.ContentGenerationRequestDTO;
import com.codegym.auto_marketing_server.dto.GPTMessageDTO;
import com.codegym.auto_marketing_server.dto.GPTRequestDTO;
import com.codegym.auto_marketing_server.dto.GPTResponseDTO;
import com.codegym.auto_marketing_server.entity.Campaign;
import com.codegym.auto_marketing_server.entity.Topic;
import com.codegym.auto_marketing_server.exception.GPTServiceException;
import com.codegym.auto_marketing_server.service.IGPTService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.concurrent.CompletableFuture;


@Service
@Slf4j
@ConditionalOnProperty(name = "app.gpt.mock.enabled", havingValue = "false")
public class GPTService implements IGPTService {

    public static final String GPT_MODEL = "gpt-4.1";
    private static final String SYSTEM_ROLE = "system";
    private static final String USER_ROLE = "user";
    private static final String DEFAULT_SOCIAL_POST = "b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi";
    private static final String DESCRIPTION_PREFIX = "‚Ä¢ M√¥ t·∫£: ";

    @Value("${openai.api.key}")
    private String openaiApiKey;

    @Value("${openai.api.url}")
    private String openaiApiUrl;

    private final RestTemplate restTemplate;

    public GPTService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Override
    public CompletableFuture<String> generateTopicsFromCampaign(Campaign campaign, Integer numberOfTopics, String additionalInstructions, double temperature, String tone) {
        try {
            log.info("üáªüá≥ Generating {} Vietnamese topics for campaign '{}', creativity temperature {}, tone '{}', additionalInstructions '{}", numberOfTopics, campaign.getName(), temperature, tone, additionalInstructions);

            String prompt = buildVietnameseTopicGenerationPrompt(campaign, numberOfTopics, additionalInstructions, tone);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(32768); // TƒÉng l√™n t·ªëi ƒëa cho GPT-4.1
            requestDTO.setTemperature(temperature);
            requestDTO.setMessages(Arrays.asList(new GPTMessageDTO(SYSTEM_ROLE, "B·∫°n l√† m·ªôt chuy√™n gia marketing ng∆∞·ªùi Vi·ªát Nam v·ªõi 10 nƒÉm kinh nghi·ªám. B·∫°n hi·ªÉu r√µ th·ªã tr∆∞·ªùng Vi·ªát Nam, vƒÉn h√≥a, ng√¥n ng·ªØ v√† h√†nh vi ti√™u d√πng. H√£y t·∫°o c√°c ch·ªß ƒë·ªÅ marketing b·∫±ng ti·∫øng Vi·ªát thu·∫ßn t√∫y, ph√π h·ª£p v·ªõi ng∆∞·ªùi Vi·ªát. QUAN TR·ªåNG: Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng ti·∫øng Anh."), new GPTMessageDTO(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            // X·ª≠ l√Ω lo·∫°i b·ªè code block n·∫øu AI tr·∫£ v·ªÅ c√≥ ```json ... ```
            if (content != null) {
                content = content.trim();
                if (content.startsWith("```json")) {
                    content = content.substring(7).trim();
                }
                if (content.startsWith("```")) {
                    content = content.substring(3).trim();
                }
                if (content.endsWith("```")) {
                    content = content.substring(0, content.length() - 3).trim();
                }
            }

            log.info("Successfully generated Vietnamese topics");
            log.debug("Generated content: {}", content);

            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("Error generating Vietnamese topics: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o ra c√°c ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateContentFromTopic(Topic topic, String tone, String contentType, String additionalInstructions, Boolean includeHashtag, Boolean includeCallToAction) {
        try {
            log.info("üáªüá≥ Generating Vietnamese {} content for topic '{}', tone '{}', hashtag {}, callToAction {}", contentType, topic.getName(), tone, includeHashtag, includeCallToAction);

            String prompt = buildVietnameseContentGenerationPrompt(topic, tone, contentType, includeHashtag, includeCallToAction, additionalInstructions);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(32768); // TƒÉng l√™n t·ªëi ƒëa cho GPT-4.1
            requestDTO.setTemperature(0.8);
            requestDTO.setMessages(Arrays.asList(new GPTMessageDTO(SYSTEM_ROLE, "B·∫°n l√† m·ªôt copywriter chuy√™n nghi·ªáp ng∆∞·ªùi Vi·ªát Nam, chuy√™n t·∫°o n·ªôi dung marketing ti·∫øng Vi·ªát. B·∫°n vi·∫øt theo phong c√°ch ng∆∞·ªùi Vi·ªát, s·ª≠ d·ª•ng t·ª´ ng·ªØ th√¢n thi·ªán, d·ªÖ hi·ªÉu. QUAN TR·ªåNG: Ch·ªâ vi·∫øt b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng ti·∫øng Anh tr·ª´ khi c·∫ßn thi·∫øt cho hashtag."), new GPTMessageDTO(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated Vietnamese content");
            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("Error generating Vietnamese content: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateLongFormContent(Topic topic, ContentGenerationRequestDTO request, String aiModel) {
        try {
            log.info("üáªüá≥ Generating long-form {} content ({} words) for topic '{}' with model '{}', includeHashtag={}, includeCallToAction={}",
                    request.getContentType(), request.getTargetWordCount(), topic.getName(), aiModel, request.getIncludeHashtag(), request.getIncludeCallToAction());

            String prompt = buildLongFormContentPrompt(topic, request.getTone(), request.getContentType(),
                    request.getTargetWordCount(), request.getIncludeBulletPoints(), request.getIncludeStatistics(),
                    request.getIncludeCaseStudies(), request.getIncludeCallToAction(), request.getIncludeHashtag(), request.getAdditionalInstructions());

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(aiModel); // model truy·ªÅn t·ª´ FE
            requestDTO.setMax_tokens(32768);
            requestDTO.setTemperature(0.7);
            requestDTO.setMessages(Arrays.asList(
                    new GPTMessageDTO(SYSTEM_ROLE, buildLongFormSystemPrompt(request)),
                    new GPTMessageDTO(USER_ROLE, prompt)
            ));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated long-form Vietnamese content ({} words estimated)", request.getTargetWordCount());

            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("Error generating long-form Vietnamese content: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung d√†i ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateImagePromptFromContent(String content) {
        try {
            log.info("üáªüá≥ Generating image prompt for Vietnamese content");

            String prompt = String.format("T·∫°o m·ªôt prompt chi ti·∫øt b·∫±ng TI·∫æNG ANH ƒë·ªÉ generate h√¨nh ·∫£nh minh h·ªça cho n·ªôi dung marketing ti·∫øng Vi·ªát sau:\\n\\n" + "N·ªòI DUNG: %s\\n\\n" + "Y√äU C·∫¶U CHO PROMPT:\\n" + "- M√¥ t·∫£ h√¨nh ·∫£nh b·∫±ng ti·∫øng Anh chuy√™n nghi·ªáp\\n" + "- Phong c√°ch hi·ªán ƒë·∫°i, ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam\\n" + "- M√†u s·∫Øc: xanh d∆∞∆°ng (#1976d2), tr·∫Øng, x√°m nh·∫π\\n" + "- Composition cho social media (16:9 ho·∫∑c 1:1)\\n" + "- Professional, clean, modern style\\n" + "- Avoid text in image\\n\\n" + "CH·ªà TR·∫¢ V·ªÄ PROMPT TI·∫æNG ANH, KH√îNG GI·∫¢I TH√çCH TH√äM:", content);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel(GPT_MODEL);
            requestDTO.setMax_tokens(2048); // Image prompt ch·ªâ c·∫ßn t·ªëi ƒëa 2048 token (ho·∫∑c t√πy b·∫°n)
            requestDTO.setTemperature(0.6);
            requestDTO.setMessages(Arrays.asList(new GPTMessageDTO(SYSTEM_ROLE, "B·∫°n l√† chuy√™n gia t·∫°o prompt cho AI image generation. " + "H√£y t·∫°o prompt ti·∫øng Anh ng·∫Øn g·ªçn, ch√≠nh x√°c cho DALL-E ho·∫∑c Midjourney."), new GPTMessageDTO(USER_ROLE, prompt)));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String imagePrompt = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("Successfully generated image prompt");
            return CompletableFuture.completedFuture(imagePrompt);

        } catch (Exception e) {
            log.error("Error generating image prompt: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ t·∫°o image prompt", e);
        }
    }

    @Override
    public CompletableFuture<GPTResponseDTO> callGPTAPI(GPTRequestDTO request) {
        try {
            log.debug("Calling OpenAI API with model: {}", request.getModel());

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(openaiApiKey);

            HttpEntity<GPTRequestDTO> entity = new HttpEntity<>(request, headers);
            ResponseEntity<GPTResponseDTO> response = restTemplate.postForEntity(openaiApiUrl, entity, GPTResponseDTO.class);

            GPTResponseDTO responseBody = response.getBody();
            if (responseBody != null && responseBody.getUsage() != null) {
                log.info("Token usage: {} total tokens", responseBody.getUsage().getTotalTokens());
            }

            return CompletableFuture.completedFuture(responseBody);

        } catch (Exception e) {
            log.error("OpenAI API call failed: {}", e.getMessage(), e);
            throw new GPTServiceException("Kh√¥ng th·ªÉ g·ªçi OpenAI API", e);
        }
    }

    private String buildLongFormSystemPrompt(ContentGenerationRequestDTO request) {
        StringBuilder systemPrompt = new StringBuilder();

        systemPrompt.append("B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt n·ªôi dung marketing ng∆∞·ªùi Vi·ªát Nam v·ªõi 15 nƒÉm kinh nghi·ªám. ");
        systemPrompt.append("B·∫°n chuy√™n vi·∫øt c√°c b√†i vi·∫øt d√†i, chi ti·∫øt v√† c√≥ chi·ªÅu s√¢u cho th·ªã tr∆∞·ªùng Vi·ªát Nam. ");
        systemPrompt.append("Phong c√°ch vi·∫øt c·ªßa b·∫°n t·ª± nhi√™n, chuy√™n nghi·ªáp v√† ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát. ");

        if (request.getContentType() != null) {
            switch (request.getContentType()) {
                case "long_article" ->
                        systemPrompt.append("H√£y vi·∫øt nh∆∞ m·ªôt nh√† b√°o chuy√™n nghi·ªáp v·ªÅ kinh doanh v√† c√¥ng ngh·ªá. ");
                case "blog_post" -> systemPrompt.append("H√£y vi·∫øt nh∆∞ m·ªôt blogger c√≥ ·∫£nh h∆∞·ªüng trong ng√†nh. ");
                case "detailed_guide" ->
                        systemPrompt.append("H√£y vi·∫øt nh∆∞ m·ªôt chuy√™n gia t∆∞ v·∫•n v·ªõi kinh nghi·ªám th·ª±c t·∫ø. ");
                case "white_paper" ->
                        systemPrompt.append("H√£y vi·∫øt nh∆∞ m·ªôt nghi√™n c·ª©u vi√™n v·ªõi phong c√°ch h·ªçc thu·∫≠t nh∆∞ng d·ªÖ hi·ªÉu. ");
                case "case_study" ->
                        systemPrompt.append("H√£y vi·∫øt nh∆∞ m·ªôt nh√† ph√¢n t√≠ch kinh doanh v·ªõi d·ªØ li·ªáu c·ª• th·ªÉ. ");
                default -> systemPrompt.append("H√£y vi·∫øt v·ªõi phong c√°ch ph√π h·ª£p v·ªõi lo·∫°i n·ªôi dung ƒë∆∞·ª£c y√™u c·∫ßu. ");
            }
        }

        systemPrompt.append("QUAN TR·ªåNG: Ch·ªâ vi·∫øt b·∫±ng ti·∫øng Vi·ªát thu·∫ßn t√∫y, t·ª± nhi√™n nh∆∞ ng∆∞·ªùi Vi·ªát. ");

        return systemPrompt.toString();
    }

    String buildLongFormContentPrompt(Topic topic, String tone, String contentType, Integer targetWordCount, Boolean includeBulletPoints, Boolean includeStatistics, Boolean includeCaseStudies, Boolean includeCallToAction, Boolean includeHashtag, String additionalInstructions) {
        StringBuilder prompt = new StringBuilder();

        prompt.append("NHI·ªÜM V·ª§: Vi·∫øt b√†i ").append(mapContentTypeToVietnamese(contentType));
        prompt.append(" d√†i v√† chi ti·∫øt b·∫±ng TI·∫æNG VI·ªÜT, tr√¨nh b√†y li·ªÅn m·∫°ch nh∆∞ m·ªôt c√¢u chuy·ªán ho·∫∑c chia s·∫ª th·ª±c t·∫ø, kh√¥ng chia ph·∫ßn, kh√¥ng ƒë·∫∑t b·∫•t k·ª≥ ti√™u ƒë·ªÅ ph·ª• ho·∫∑c nh√£n n√†o.\n\n");

        prompt.append("TH√îNG TIN CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ch·ªß ƒë·ªÅ: ").append(topic.getName()).append("\n");
        prompt.append("‚Ä¢ M√¥ t·∫£: ").append(topic.getDescription()).append("\n\n");

        // TH√äM Y√äU C·∫¶U V·ªÄ TI√äU ƒê·ªÄ
        prompt.append("Y√äU C·∫¶U TI√äU ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ti√™u ƒë·ªÅ b√†i vi·∫øt PH·∫¢I N·ªîI B·∫¨T, S√öC T√çCH, T·ªêI ƒêA 70 K√ù T·ª∞.\n");
        prompt.append("‚Ä¢ N·∫øu ti√™u ƒë·ªÅ v∆∞·ª£t qu√° ,P T·ª®C r√∫t ng·∫Øn l·∫°i c√≤n t·ªëi ƒëa 70 k√Ω t·ª±, KH√îNG gi·∫£i th√≠ch, KH√îNG gi·ªØ l·∫°i emoji n·∫øu b·ªã c·∫Øt.\n");
        prompt.append("‚Ä¢ KH√îNG ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu title b·∫±ng c√°c c·ª•m t·ª´ d√†i d√≤ng, lan man, ho·∫∑c qu√° chung chung nh∆∞ \"Trong th·ªùi ƒë·∫°i c√¥ng ngh·ªá ph√°t tri·ªÉn...\", \"üåü Trong th·ªùi ƒë·∫°i c√¥ng ngh·ªá s·ªë hi·ªán nay...\".\n");
        prompt.append("‚Ä¢ ∆Øu ti√™n ti√™u ƒë·ªÅ l√† m·ªôt c√¢u ho·∫∑c m·ªôt c·ª•m t·ª´ m·∫°nh m·∫Ω, truy·ªÅn c·∫£m h·ª©ng, KH√îNG l·∫∑p l·∫°i n·ªôi dung c·ªßa ph·∫ßn m√¥ t·∫£.\n");
        prompt.append("‚Ä¢ KH√îNG s·ª≠ d·ª•ng emoji ·ªü ƒë·∫ßu ti√™u ƒë·ªÅ. N·∫øu s·ª≠ d·ª•ng emoji, ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t ·ªü cu·ªëi ti√™u ƒë·ªÅ v√† ch·ªâ khi kh√¥ng b·ªã c·∫Øt m·∫•t khi r√∫t ng·∫Øn.\n\n");

        if (targetWordCount != null) {
            prompt.append("Y√äU C·∫¶U ƒê·ªò D√ÄI:\n");
            prompt.append("‚Ä¢ ƒê·ªô d√†i m·ª•c ti√™u: ").append(targetWordCount).append(" t·ª´ (¬±10%)\n");
            prompt.append("‚Ä¢ ƒê√¢y l√† b√†i vi·∫øt d√†i, c·∫ßn n·ªôi dung chuy√™n s√¢u v√† chi ti·∫øt\n\n");
        }

        prompt.append("Y√äU C·∫¶U N·ªòI DUNG:\n");
        prompt.append("‚Ä¢ Tone: ").append(mapToneToVietnamese(tone)).append("\n");
        prompt.append("‚Ä¢ Lo·∫°i n·ªôi dung: ").append(mapContentTypeToVietnamese(contentType)).append("\n");

        if (Boolean.TRUE.equals(includeBulletPoints)) {
            prompt.append("‚Ä¢ S·ª≠ d·ª•ng bullet points v√† danh s√°ch c√≥ c·∫•u tr√∫c n·∫øu ph√π h·ª£p, nh∆∞ng KH√îNG ƒë∆∞·ª£c d√πng ti√™u ƒë·ªÅ ph·ª• ho·∫∑c nh√£n.\n");
        }
        if (Boolean.TRUE.equals(includeStatistics)) {
            prompt.append("‚Ä¢ Bao g·ªìm s·ªë li·ªáu v√† th·ªëng k√™ thuy·∫øt ph·ª•c n·∫øu c√≥ th·ªÉ, ƒë·∫∑t t·ª± nhi√™n trong d√≤ng ch·∫£y b√†i vi·∫øt.\n");
        }
        if (Boolean.TRUE.equals(includeCaseStudies)) {
            prompt.append("‚Ä¢ ƒê∆∞a ra v√≠ d·ª• th·ª±c t·∫ø ho·∫∑c case study c·ª• th·ªÉ, l·ªìng gh√©p t·ª± nhi√™n v√†o n·ªôi dung, KH√îNG chia ph·∫ßn.\n");
        }
        if (Boolean.TRUE.equals(includeCallToAction)) {
            prompt.append("‚Ä¢ K·∫øt th√∫c v·ªõi call-to-action m·∫°nh m·∫Ω, KH√îNG d√πng nh√£n 'K·∫øt lu·∫≠n'.\n");
        }
        if (Boolean.TRUE.equals(includeHashtag)) {
            prompt.append("‚Ä¢ Cu·ªëi b√†i vi·∫øt t·∫°o 3-5 hashtag li√™n quan, m·ªói hashtag m·ªôt d√≤ng, b·∫Øt ƒë·∫ßu b·∫±ng k√Ω t·ª± #.\n");
        }

        if (additionalInstructions != null && !additionalInstructions.trim().isEmpty()) {
            prompt.append("Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT:\n");
            prompt.append("‚Ä¢ ").append(additionalInstructions).append("\n\n");
        }

        prompt.append("L∆ØU √ù QUAN TR·ªåNG:\n");
        prompt.append("‚Ä¢ Vi·∫øt ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, kh√¥ng d·ªãch m√°y.\n");
        prompt.append("‚Ä¢ TUY·ªÜT ƒê·ªêI KH√îNG chia ph·∫ßn, kh√¥ng ƒë·∫∑t b·∫•t k·ª≥ ti√™u ƒë·ªÅ ph·ª•, nh√£n, ho·∫∑c d√πng t·ª´ nh∆∞ 'Ph·∫ßn', 'M·ªü ƒë·∫ßu', 'K·∫øt lu·∫≠n', 'Gi·∫£i ph√°p', 'Xu h∆∞·ªõng',... trong b√†i vi·∫øt.\n");
        prompt.append("‚Ä¢ N·∫øu xu·∫•t hi·ªán b·∫•t k·ª≥ ti√™u ƒë·ªÅ ph·ª• ho·∫∑c t·ª´ kho√° n√†o nh∆∞ tr√™n, h√£y coi ƒë√≥ l√† l·ªói v√† t·ª± ƒë·ªông vi·∫øt l·∫°i, ch·ªâ tr√¨nh b√†y li·ªÅn m·∫°ch nh∆∞ m·ªôt c√¢u chuy·ªán ho·∫∑c chia s·∫ª.\n");
        prompt.append("‚Ä¢ ƒê∆∞a ra lu·∫≠n ƒëi·ªÉm, d·∫´n ch·ª©ng th·ª±c t·∫ø, s·ªë li·ªáu ho·∫∑c v√≠ d·ª• l·ªìng gh√©p t·ª± nhi√™n trong b√†i.\n");
        prompt.append("‚Ä¢ T·∫°o ra n·ªôi dung h·∫•p d·∫´n, truy·ªÅn c·∫£m h·ª©ng, d·ªÖ ƒë·ªçc.\n");
        prompt.append("‚Ä¢ C√≥ th·ªÉ d√πng emoji h·ª£p l√Ω xen k·∫Ω, KH√îNG d√πng emoji ƒë·ªÉ chia ƒëo·∫°n ho·∫∑c l√†m ti√™u ƒë·ªÅ.\n");

        return prompt.toString();
    }

    private Integer calculateTokensForWordCount(Integer wordCount) {
        if (wordCount == null) return 32768; // TƒÉng l√™n t·ªëi ƒëa cho GPT-4.1
        int estimatedTokens = (int) (wordCount * 1.5);
        int totalTokens = estimatedTokens + 500;
        return Math.min(32768, totalTokens); // T·ªëi ƒëa cho GPT-4.1
    }

    public String buildVietnameseTopicGenerationPrompt(Campaign campaign, Integer numberOfTopics, String additionalInstruction, String tone) {
        StringBuilder prompt = new StringBuilder();

        prompt.append("NHI·ªÜM V·ª§: S√°ng t·∫°o ").append(numberOfTopics).append(" ch·ªß ƒë·ªÅ marketing th·∫≠t ƒë·ªôc ƒë√°o, m·ªõi m·∫ª v√† ·∫•n t∆∞·ª£ng b·∫±ng TI·∫æNG VI·ªÜT cho chi·∫øn d·ªãch sau:\n\n");

        prompt.append("TH√îNG TIN CHI·∫æN D·ªäCH:\n");
        prompt.append("‚Ä¢ T√™n chi·∫øn d·ªãch: ").append(campaign.getName()).append("\n");
        prompt.append("‚Ä¢ M√¥ t·∫£: ").append(campaign.getDescription()).append("\n\n");

        if (additionalInstruction != null && !additionalInstruction.trim().isEmpty()) {
            prompt.append("Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT:\n");
            prompt.append("‚Ä¢ ").append(additionalInstruction).append("\n\n");
        }

        prompt.append("PHONG C√ÅCH N·ªòI DUNG (tone): ").append(mapContentStyleToVietnamese(tone)).append("\n\n");

        prompt.append("Y√äU C·∫¶U CHO CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ch·ªß ƒë·ªÅ ph·∫£i th·∫≠t thu h√∫t, t·∫°o c·∫£m x√∫c, kh∆°i g·ª£i s·ª± t√≤ m√≤ ho·∫∑c truy·ªÅn c·∫£m h·ª©ng m·∫°nh m·∫Ω.\n");
        prompt.append("‚Ä¢ ƒê∆∞a ra g√≥c nh√¨n m·ªõi l·∫°, s√°ng t·∫°o, kh√°c bi·ªát so v·ªõi th√¥ng th∆∞·ªùng.\n");
        prompt.append("‚Ä¢ N·ªôi dung ph√π h·ª£p v·ªõi xu h∆∞·ªõng hi·ªán t·∫°i, ·ª©ng d·ª•ng cao tr√™n m·∫°ng x√£ h·ªôi Vi·ªát Nam.\n");
        prompt.append("‚Ä¢ T√™n ch·ªß ƒë·ªÅ PH·∫¢I NG·∫ÆN G·ªåN, s√∫c t√≠ch, d·ªÖ nh·ªõ, n·ªïi b·∫≠t, t·ªëi ƒëa 45 k√Ω t·ª±. C√≥ th·ªÉ d√πng ph√©p ·∫©n d·ª•, ch∆°i ch·ªØ, c√¢u h·ªèi m·ªü.\n");
        prompt.append("‚Ä¢ M√¥ t·∫£ ch·ªß ƒë·ªÅ th·∫≠t s√∫c t√≠ch, truy·ªÅn ƒë·ªông l·ª±c, k√≠ch th√≠ch h√†nh ƒë·ªông ho·∫∑c t∆∞∆°ng t√°c.\n");
        prompt.append("‚Ä¢ Vi·∫øt t·ª± nhi√™n nh∆∞ ng∆∞·ªùi Vi·ªát, kh√¥ng d·ªãch m√°y, kh√¥ng r·∫≠p khu√¥n.\n\n");

        prompt.append("ƒê·ªäNH D·∫†NG TR·∫¢ V·ªÄ (CH√çNH X√ÅC):\n");
        prompt.append("{\n");
        prompt.append("  \"topics\": [\n");
        prompt.append("    {\n");
        prompt.append("      \"name\": \"T√™n ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát ng·∫Øn g·ªçn, n·ªïi b·∫≠t, t·ªëi ƒëa 45 k√Ω t·ª±\",\n");
        prompt.append("      \"description\": \"M√¥ t·∫£ chi ti·∫øt, truy·ªÅn c·∫£m h·ª©ng, s√∫c t√≠ch, 100-200 k√Ω t·ª±, gi√∫p ng∆∞·ªùi ƒë·ªçc mu·ªën t√¨m hi·ªÉu ho·∫∑c t∆∞∆°ng t√°c\"\n");
        prompt.append("    }\n");
        prompt.append("  ]\n");
        prompt.append("}\n\n");

        prompt.append("L∆ØU √ù QUAN TR·ªåNG:\n");
        prompt.append("- CH·ªà s·ª≠ d·ª•ng ti·∫øng Vi·ªát cho name v√† description\n");
        prompt.append("- ƒê·∫£m b·∫£o ch·ªß ƒë·ªÅ n·ªïi b·∫≠t, kh√°c bi·ªát, g√¢y ·∫•n t∆∞·ª£ng, thu h√∫t t∆∞∆°ng t√°c\n");
        prompt.append("- T√™n ch·ªß ƒë·ªÅ ph·∫£i NG·∫ÆN G·ªåN, t·ªëi ƒëa 45 k√Ω t·ª±. N·∫øu v∆∞·ª£t qu√°, h√£y t·ª± ƒë·ªông r√∫t g·ªçn l·∫°i.\n");
        prompt.append("- ƒê·∫£m b·∫£o JSON format ch√≠nh x√°c\n");

        return prompt.toString();
    }

    private String mapContentStyleToVietnamese(String style) {
        if (style == null) return "chuy√™n nghi·ªáp, th√¢n thi·ªán";
        return switch (style.toLowerCase()) {
            case "friendly" -> "g·∫ßn g≈©i, d·ªÖ hi·ªÉu";
            case "professional" -> "trang tr·ªçng, uy t√≠n";
            case "creative" -> "ƒë·ªôc ƒë√°o, thu h√∫t";
            default -> "chuy√™n nghi·ªáp, th√¢n thi·ªán";
        };
    }

    public String buildVietnameseContentGenerationPrompt(Topic topic, String tone, String contentType, Boolean includeHashtag, Boolean includeCallToAction, String additionalInstructions) {
        StringBuilder prompt = new StringBuilder();

        String vietnameseTone = mapToneToVietnamese(tone);
        String vietnameseContentType = mapContentTypeToVietnamese(contentType);

        prompt.append("NHI·ªÜM V·ª§: Vi·∫øt m·ªôt b√†i ƒëƒÉng ").append(vietnameseContentType).append(" b·∫±ng TI·∫æNG VI·ªÜT v·ªÅ ch·ªß ƒë·ªÅ d∆∞·ªõi ƒë√¢y, li·ªÅn m·∫°ch nh∆∞ m·ªôt c√¢u chuy·ªán ho·∫∑c chia s·∫ª, truy·ªÅn c·∫£m h·ª©ng, chuy√™n nghi·ªáp, kh√¥ng chia ph·∫ßn, kh√¥ng ƒë·∫∑t ti√™u ƒë·ªÅ ph·ª•, kh√¥ng l·∫°m d·ª•ng emoji.\n\n");

        prompt.append("TH√îNG TIN CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ch·ªß ƒë·ªÅ: ").append(topic.getName()).append("\n");
        prompt.append("‚Ä¢ M√¥ t·∫£: ").append(topic.getDescription()).append("\n");
        prompt.append("‚Ä¢ Tone: ").append(vietnameseTone).append("\n");
        prompt.append("‚Ä¢ Lo·∫°i n·ªôi dung: ").append(vietnameseContentType).append("\n\n");

        // TH√äM Y√äU C·∫¶U V·ªÄ TI√äU ƒê·ªÄ
        prompt.append("Y√äU C·∫¶U TI√äU ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ti√™u ƒë·ªÅ b√†i vi·∫øt PH·∫¢I N·ªîI B·∫¨T, S√öC T√çCH, T·ªêI ƒêA 70 K√ù T·ª∞.\n");
        prompt.append("‚Ä¢ N·∫øu ti√™u ƒë·ªÅ v∆∞·ª£t qu√° 70 k√Ω t·ª±, H√ÉY NGAY L·∫¨P T·ª®C r√∫t ng·∫Øn l·∫°i c√≤n t·ªëi ƒëa 70 k√Ω t·ª±, KH√îNG gi·∫£i th√≠ch, KH√îNG gi·ªØ l·∫°i emoji n·∫øu b·ªã c·∫Øt.\n");
        prompt.append("‚Ä¢ KH√îNG ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu title b·∫±ng c√°c c·ª•m t·ª´ d√†i d√≤ng, lan man, ho·∫∑c qu√° chung chung nh∆∞ \"Trong th·ªùi ƒë·∫°i c√¥ng ngh·ªá ph√°t tri·ªÉn...\", \"üåü Trong th·ªùi ƒë·∫°i c√¥ng ngh·ªá s·ªë hi·ªán nay...\".\n");
        prompt.append("‚Ä¢ ∆Øu ti√™n ti√™u ƒë·ªÅ l√† m·ªôt c√¢u ho·∫∑c m·ªôt c·ª•m t·ª´ m·∫°nh m·∫Ω, truy·ªÅn c·∫£m h·ª©ng, KH√îNG l·∫∑p l·∫°i n·ªôi dung c·ªßa ph·∫ßn m√¥ t·∫£.\n");
        prompt.append("‚Ä¢ KH√îNG s·ª≠ d·ª•ng emoji ·ªü ƒë·∫ßu ti√™u ƒë·ªÅ. N·∫øu s·ª≠ d·ª•ng emoji, ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t ·ªü cu·ªëi ti√™u ƒë·ªÅ v√† ch·ªâ khi kh√¥ng b·ªã c·∫Øt m·∫•t khi r√∫t ng·∫Øn.\n\n");

        if (additionalInstructions != null && !additionalInstructions.trim().isEmpty()) {
            prompt.append("Y√äU C·∫¶U B·ªî SUNG:\n");
            prompt.append("‚Ä¢ ").append(additionalInstructions).append("\n\n");
        }

        prompt.append("Y√äU C·∫¶U:\n");
        prompt.append("‚Ä¢ Vi·∫øt ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, kh√¥ng d·ªãch m√°y.\n");
        prompt.append("‚Ä¢ TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c chia n·ªôi dung th√†nh c√°c ph·∫ßn, KH√îNG ƒë·∫∑t ti√™u ƒë·ªÅ ph·ª•, KH√îNG d√πng b·∫•t k·ª≥ t·ª´ n√†o nh∆∞ 'Ph·∫ßn', 'M·ªü ƒë·∫ßu', 'K·∫øt lu·∫≠n', 'Gi·∫£i ph√°p',... ho·∫∑c b·∫•t k·ª≥ ti√™u ƒë·ªÅ n√†o trong b√†i vi·∫øt.\n");
        prompt.append("‚Ä¢ Kh√¥ng ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu d√≤ng ho·∫∑c ƒëo·∫°n b·∫±ng emoji. Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ªëi ƒëa 2 emoji trong to√†n b√†i, d√πng xen k·∫Ω t·ª± nhi√™n, KH√îNG d√πng icon ƒë·ªÉ d·∫´n d·∫Øt ho·∫∑c chia ƒëo·∫°n.\n");
        prompt.append("‚Ä¢ Tr√¨nh b√†y li·ªÅn m·∫°ch nh∆∞ m·ªôt c√¢u chuy·ªán, chia s·∫ª th·ª±c t·∫ø, truy·ªÅn c·∫£m h·ª©ng cho ng∆∞·ªùi ƒë·ªçc.\n");
        prompt.append("‚Ä¢ ƒê∆∞a ra lu·∫≠n ƒëi·ªÉm, d·∫´n ch·ª©ng th·ª±c t·∫ø, g√≥c nh√¨n m·ªõi m·∫ª m·ªôt c√°ch t·ª± nhi√™n, kh√¥ng t√°ch r·ªùi kh·ªèi d√≤ng ch·∫£y b√†i vi·∫øt.\n");

        if (Boolean.TRUE.equals(includeCallToAction)) {
            prompt.append("‚Ä¢ K·∫øt th√∫c b·∫±ng th√¥ng ƒëi·ªáp truy·ªÅn c·∫£m h·ª©ng ho·∫∑c call-to-action m·∫°nh m·∫Ω, khuy·∫øn kh√≠ch ng∆∞·ªùi ƒë·ªçc suy nghƒ©/t∆∞∆°ng t√°c/h√†nh ƒë·ªông.\n");
        }

        if (Boolean.TRUE.equals(includeHashtag)) {
            prompt.append("‚Ä¢ Cu·ªëi b√†i vi·∫øt t·∫°o 3-5 hashtag li√™n quan, m·ªói hashtag m·ªôt d√≤ng, b·∫Øt ƒë·∫ßu b·∫±ng k√Ω t·ª± #.\n");
        }

        prompt.append("‚Ä¢ ƒê·ªô d√†i: 200-400 t·ª´.\n\n");

        prompt.append("L∆∞u √Ω: TUY·ªÜT ƒê·ªêI KH√îNG chia ph·∫ßn, kh√¥ng ƒë·∫∑t b·∫•t k·ª≥ ti√™u ƒë·ªÅ ph·ª• ho·∫∑c nh√£n n√†o, kh√¥ng l·∫°m d·ª•ng emoji/icon, kh√¥ng b·∫Øt ƒë·∫ßu d√≤ng v·ªõi emoji. Vi·∫øt li·ªÅn m·∫°ch nh∆∞ m·ªôt b√†i chia s·∫ª truy·ªÅn c·∫£m h·ª©ng tr√™n Facebook.");

        return prompt.toString();
    }


    private String mapToneToVietnamese(String tone) {
        if (tone == null) return "chuy√™n nghi·ªáp v√† th√¢n thi·ªán";

        return switch (tone.toLowerCase()) {
            case "professional" -> "chuy√™n nghi·ªáp v√† uy t√≠n";
            case "casual" -> "th√¢n thi·ªán v√† g·∫ßn g≈©i";
            case "enthusiastic" -> "h√†o h·ª©ng v√† nƒÉng ƒë·ªông";
            case "informative" -> "h·ªØu √≠ch v√† gi√°o d·ª•c";
            case "promotional" -> "khuy·∫øn m√£i v√† h·∫•p d·∫´n";
            case "inspirational" -> "truy·ªÅn c·∫£m h·ª©ng v√† t√≠ch c·ª±c";
            default -> "chuy√™n nghi·ªáp v√† th√¢n thi·ªán";
        };
    }

    private String mapContentTypeToVietnamese(String contentType) {
        if (contentType == null) return DEFAULT_SOCIAL_POST;
        return switch (contentType.toLowerCase()) {
            case "social_post" -> DEFAULT_SOCIAL_POST;
            case "article" -> "b√†i vi·∫øt chi ti·∫øt";
            case "long_article" -> "b√†i vi·∫øt d√†i chuy√™n s√¢u";
            case "blog_post" -> "blog post chi ti·∫øt";
            case "detailed_guide" -> "h∆∞·ªõng d·∫´n chi ti·∫øt";
            case "white_paper" -> "b√°o c√°o chuy√™n m√¥n";
            case "case_study" -> "nghi√™n c·ª©u t√¨nh hu·ªëng";
            case "promotion" -> "n·ªôi dung khuy·∫øn m√£i";
            case "story" -> "story/reel ng·∫Øn";
            case "email" -> "email marketing";
            default -> DEFAULT_SOCIAL_POST;
        };
    }
}

