package com.codegym.auto_marketing_server.dto;

import com.codegym.auto_marketing_server.enums.PostStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Schema(description = "Enhanced post response with complete content details")
public class PostResponseDTO {

    @Schema(description = "Post ID", example = "48")
    private Long id;

    @Schema(description = "Associated topic ID", example = "35")
    private Long topicId;

    // ========== CONTENT FIELDS ==========
    @Schema(description = "Post title", example = "üöÄ AI Thay ƒê·ªïi C√°ch L√†m Vi·ªác - B·∫°n ƒê√£ S·∫µn S√†ng?")
    private String title;

    @Schema(description = "Complete post content in Vietnamese", example = "Tr√≠ tu·ªá nh√¢n t·∫°o kh√¥ng c√≤n l√† t∆∞∆°ng lai xa v·ªùi...")
    private String content;

    @Schema(description = "Hashtags for the post", example = "#AI #ChuyenDoiSo #DoanhNghiepVietNam")
    private String hashtag;

    // ========== GENERATION METADATA ==========
    @Schema(description = "Whether content was generated by AI", example = "true")
    private Boolean generatedByAI = true;

    @Schema(description = "AI prompt used for generation")
    private String aiPrompt;

    @Schema(description = "AI model used for generation", example = "gpt-4")
    private String aiModel;

    @Schema(description = "Content type used", example = "social_post")
    private String contentType;

    @Schema(description = "Content tone used", example = "professional")
    private String tone;

    @Schema(description = "Target audience", example = "1")
    private Integer targetAudience;

    @Schema(description = "Token usage information")
    private String tokenUsage;

    @Schema(description = "AI generation timestamp")
    private LocalDateTime generateTime;

    // ========== STATUS & SCHEDULING ==========
    @Schema(description = "Current post status")
    private PostStatus status = PostStatus.PUBLISHED;

    // ========== AUDIT FIELDS ==========
    @Schema(description = "Content creation date")
    private LocalDate createdAt;

    @Schema(description = "Last update date")
    private LocalDate updatedAt;

    // ========== RELATIONSHIPS ==========
    @Schema(description = "Associated topic information")
    private TopicResponseDTO topic;

    private String imageUrl;

    // Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ tr·∫£ v·ªÅ danh s√°ch nhi·ªÅu ·∫£nh
    private List<String> imageUrls;
}
