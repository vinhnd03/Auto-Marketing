package com.codegym.auto_marketing_server.controller.vnpay;


import com.codegym.auto_marketing_server.service.ITransactionService;
import com.codegym.auto_marketing_server.service.vnpay.VNPayService;
import com.codegym.auto_marketing_server.util.vnpay.VNPayUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

@RestController
@RequestMapping("${api.prefix}/payment")
//@CrossOrigin(origins = "http://localhost:3000")
@RequiredArgsConstructor
public class PaymentController {
    private final VNPayService vnPayService;
    private final ITransactionService transactionService;

    @PostMapping
    public Map<String, String> createPayment(@RequestBody Map<String, Object> requestData, HttpServletRequest request) {
        String serviceName = requestData.get("serviceName").toString();
        int amount = ((Number) requestData.get("amount")).intValue();
        Long userId = ((Number) requestData.get("userId")).longValue();

        String orderInfo = serviceName + "|" + userId;

        // üëâ S·ª≠ d·ª•ng service ƒë·ªÉ t·∫°o payment URL
        String paymentUrl = vnPayService.createPaymentUrl(request, amount, orderInfo);

        Map<String, String> response = new HashMap<>();
        response.put("paymentUrl", paymentUrl);
        return response;
    }


    @GetMapping("/vn-pay-callback")
    public void paymentCallback(@RequestParam Map<String, String> allParams, HttpServletResponse response) throws IOException {
        // Ki·ªÉm tra c√°c tham s·ªë b·∫Øt bu·ªôc
        if (allParams.get("vnp_Amount") == null || allParams.get("vnp_TxnRef") == null || allParams.get("vnp_OrderInfo") == null) {
            response.sendRedirect("http://localhost:3000/payment-result?success=false&message=Missing+parameters");
            return;
        }

        String vnp_SecureHash = allParams.remove("vnp_SecureHash");
        String data = VNPayUtil.buildQueryString(new TreeMap<>(allParams));
        String expectedHash = VNPayUtil.hmacSHA512(vnPayService.getConfig().getVnpHashSecret(), data);

        boolean validSignature = expectedHash.equals(vnp_SecureHash);
        String responseCode = allParams.get("vnp_ResponseCode");
        boolean success = validSignature && "00".equals(responseCode);
        String errorMessage = VNPAY_ERROR_CODES.getOrDefault(responseCode, "L·ªói kh√¥ng x√°c ƒë·ªãnh");
        String message;

        if (success) {
            message = "Thanh to√°n th√†nh c√¥ng!";
        } else if (validSignature) {
            message = "Giao d·ªãch kh√¥ng th√†nh c√¥ng. " + errorMessage;
        } else {
            message = "X√°c minh ch·ªØ k√Ω th·∫•t b·∫°i!";
        }

        long amount = Long.parseLong(allParams.get("vnp_Amount")) / 100;
        String[] parts = allParams.get("vnp_OrderInfo").split("\\|");
        String txnRef = allParams.get("vnp_TxnRef");

        String service = parts[0];
        Long userId = Long.valueOf(parts[1]);

        // G·ªçi transactionService d√π th√†nh c√¥ng hay th·∫•t b·∫°i
        String status = success ? "success" : "failed";
        transactionService.handlePayment(txnRef, amount, service, userId, status);

        String redirectUrl = String.format(
                "http://localhost:3000/payment-result?success=%s&message=%s&amount=%d&service=%s&txnRef=%s",
                success,
                URLEncoder.encode(message, StandardCharsets.UTF_8),
                amount,
                URLEncoder.encode(service, StandardCharsets.UTF_8),
                txnRef
        );

        response.sendRedirect(redirectUrl);
    }


    private static final Map<String, String> VNPAY_ERROR_CODES = Map.ofEntries(
            Map.entry("00", "Giao d·ªãch th√†nh c√¥ng"),
            Map.entry("07", "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù"),
            Map.entry("09", "Th·∫ª/T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking"),
            Map.entry("10", "Kh√°ch h√†ng x√°c th·ª±c th·∫•t b·∫°i"),
            Map.entry("11", "H·∫øt h·∫°n ch·ªù thanh to√°n"),
            Map.entry("12", "Th·∫ª/T√†i kho·∫£n b·ªã kh√≥a"),
            Map.entry("13", "Nh·∫≠p sai m·∫≠t kh·∫©u OTP qu√° s·ªë l·∫ßn"),
            Map.entry("24", "Kh√°ch h√†ng h·ªßy giao d·ªãch"),
            Map.entry("51", "T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞"),
            Map.entry("65", "V∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch"),
            Map.entry("75", "Ng√¢n h√†ng ƒëang b·∫£o tr√¨"),
            Map.entry("79", "Nh·∫≠p sai m·∫≠t kh·∫©u OTP"),
            Map.entry("99", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
    );
}
